#################################################################
# This file is automatically generated.
#################################################################


class PebbleHarnessBase(object):
    def setup_callbacks(self):
        self._callbacks = [
            self._mkcallback('animation_init'),
            self._mkcallback('animation_set_delay'),
            self._mkcallback('animation_set_duration'),
            self._mkcallback('animation_set_curve'),
            self._mkcallback('animation_set_handlers'),
            self._mkcallback('animation_set_implementation'),
            self._mkcallback('animation_get_context'),
            self._mkcallback('animation_schedule'),
            self._mkcallback('animation_unschedule'),
            self._mkcallback('animation_unschedule_all'),
            self._mkcallback('animation_is_scheduled'),
            self._mkcallback('property_animation_init_layer_frame'),
            self._mkcallback('app_event_loop'),
            self._mkcallback('bmp_init_container'),
            self._mkcallback('bmp_deinit_container'),
            self._mkcallback('graphics_draw_bitmap_in_rect'),
            self._mkcallback('rotbmp_deinit_container'),
            self._mkcallback('rotbmp_init_container'),
            self._mkcallback('rotbmp_pair_deinit_container'),
            self._mkcallback('rotbmp_pair_init_container'),
            self._mkcallback('rotbmp_pair_layer_set_src_ic'),
            self._mkcallback('rotbmp_pair_layer_set_angle'),
            self._mkcallback('app_get_current_graphics_context'),
            self._mkcallback('graphics_draw_pixel'),
            self._mkcallback('graphics_draw_line'),
            self._mkcallback('graphics_fill_rect'),
            self._mkcallback('graphics_draw_circle'),
            self._mkcallback('graphics_fill_circle'),
            self._mkcallback('graphics_draw_round_rect'),
            self._mkcallback('gpath_init'),
            self._mkcallback('gpath_move_to'),
            self._mkcallback('gpath_rotate_to'),
            self._mkcallback('gpath_draw_outline'),
            self._mkcallback('gpath_draw_filled'),
            self._mkcallback('graphics_context_set_stroke_color'),
            self._mkcallback('graphics_context_set_fill_color'),
            self._mkcallback('graphics_context_set_text_color'),
            self._mkcallback('graphics_context_set_compositing_mode'),
            self._mkcallback('graphics_text_draw'),
            self._mkcallback('light_enable'),
            self._mkcallback('light_enable_interaction'),
            self._mkcallback('window_set_click_config_provider'),
            self._mkcallback('vibes_double_pulse'),
            self._mkcallback('vibes_enqueue_custom_pattern'),
            self._mkcallback('vibes_long_pulse'),
            self._mkcallback('vibes_short_pulse'),
            self._mkcallback('layer_mark_dirty'),
            self._mkcallback('layer_remove_from_parent'),
            self._mkcallback('layer_add_child'),
            self._mkcallback('layer_get_frame'),
            self._mkcallback('layer_set_frame'),
            self._mkcallback('layer_set_hidden'),
            self._mkcallback('layer_init'),
            self._mkcallback('cos_lookup'),
            self._mkcallback('sin_lookup'),
            self._mkcallback('grect_center_point'),
            self._mkcallback('resource_init_current_app'),
            self._mkcallback('resource_get_handle'),
            self._mkcallback('resource_load'),
            self._mkcallback('resource_load_byte_range'),
            self._mkcallback('resource_size'),
            self._mkcallback('fonts_get_system_font'),
            self._mkcallback('fonts_load_custom_font'),
            self._mkcallback('fonts_unload_custom_font'),
            self._mkcallback('text_layer_init'),
            self._mkcallback('text_layer_get_text'),
            self._mkcallback('text_layer_set_text'),
            self._mkcallback('text_layer_set_background_color'),
            self._mkcallback('text_layer_set_font'),
            self._mkcallback('text_layer_set_text_alignment'),
            self._mkcallback('text_layer_set_text_color'),
            self._mkcallback('clock_is_24h_style'),
            self._mkcallback('get_time'),
            self._mkcallback('string_format_time'),
            self._mkcallback('psleep'),
            self._mkcallback('app_timer_send_event'),
            self._mkcallback('app_timer_cancel_event'),
            self._mkcallback('window_init'),
            self._mkcallback('window_stack_push'),
            self._mkcallback('window_set_background_color'),
            self._mkcallback('window_render'),
            self._mkcallback('window_set_fullscreen'),
        ]
        self.lib.setup_callbacks(*self._callbacks)

    def animation_init(self, animation):
        raise NotImplementedError("animation_init")

    def animation_set_delay(self, animation, delay_ms):
        raise NotImplementedError("animation_set_delay")

    def animation_set_duration(self, animation, duration_ms):
        raise NotImplementedError("animation_set_duration")

    def animation_set_curve(self, animation, curve):
        raise NotImplementedError("animation_set_curve")

    def animation_set_handlers(self, animation, callbacks, context):
        raise NotImplementedError("animation_set_handlers")

    def animation_set_implementation(self, animation, implementation):
        raise NotImplementedError("animation_set_implementation")

    def animation_get_context(self, animation):
        raise NotImplementedError("animation_get_context")

    def animation_schedule(self, animation):
        raise NotImplementedError("animation_schedule")

    def animation_unschedule(self, animation):
        raise NotImplementedError("animation_unschedule")

    def animation_unschedule_all(self):
        raise NotImplementedError("animation_unschedule_all")

    def animation_is_scheduled(self, animation):
        raise NotImplementedError("animation_is_scheduled")

    def property_animation_init_layer_frame(self, property_animation, layer, from_frame, to_frame):
        raise NotImplementedError("property_animation_init_layer_frame")

    def app_event_loop(self, app_task_ctx, handlers):
        raise NotImplementedError("app_event_loop")

    def bmp_init_container(self, resource_id, c):
        raise NotImplementedError("bmp_init_container")

    def bmp_deinit_container(self, c):
        raise NotImplementedError("bmp_deinit_container")

    def graphics_draw_bitmap_in_rect(self, ctx, bitmap, rect):
        raise NotImplementedError("graphics_draw_bitmap_in_rect")

    def rotbmp_deinit_container(self, c):
        raise NotImplementedError("rotbmp_deinit_container")

    def rotbmp_init_container(self, resource_id, c):
        raise NotImplementedError("rotbmp_init_container")

    def rotbmp_pair_deinit_container(self, c):
        raise NotImplementedError("rotbmp_pair_deinit_container")

    def rotbmp_pair_init_container(self, white_resource_id, black_resource_id, c):
        raise NotImplementedError("rotbmp_pair_init_container")

    def rotbmp_pair_layer_set_src_ic(self, pair, ic):
        raise NotImplementedError("rotbmp_pair_layer_set_src_ic")

    def rotbmp_pair_layer_set_angle(self, pair, angle):
        raise NotImplementedError("rotbmp_pair_layer_set_angle")

    def app_get_current_graphics_context(self):
        raise NotImplementedError("app_get_current_graphics_context")

    def graphics_draw_pixel(self, ctx, point):
        raise NotImplementedError("graphics_draw_pixel")

    def graphics_draw_line(self, ctx, p0, p1):
        raise NotImplementedError("graphics_draw_line")

    def graphics_fill_rect(self, ctx, rect, corner_radius, corner_mask):
        raise NotImplementedError("graphics_fill_rect")

    def graphics_draw_circle(self, ctx, p, radius):
        raise NotImplementedError("graphics_draw_circle")

    def graphics_fill_circle(self, ctx, p, radius):
        raise NotImplementedError("graphics_fill_circle")

    def graphics_draw_round_rect(self, ctx, rect, radius):
        raise NotImplementedError("graphics_draw_round_rect")

    def gpath_init(self, path, init):
        raise NotImplementedError("gpath_init")

    def gpath_move_to(self, path, point):
        raise NotImplementedError("gpath_move_to")

    def gpath_rotate_to(self, path, angle):
        raise NotImplementedError("gpath_rotate_to")

    def gpath_draw_outline(self, ctx, path):
        raise NotImplementedError("gpath_draw_outline")

    def gpath_draw_filled(self, ctx, path):
        raise NotImplementedError("gpath_draw_filled")

    def graphics_context_set_stroke_color(self, ctx, color):
        raise NotImplementedError("graphics_context_set_stroke_color")

    def graphics_context_set_fill_color(self, ctx, color):
        raise NotImplementedError("graphics_context_set_fill_color")

    def graphics_context_set_text_color(self, ctx, color):
        raise NotImplementedError("graphics_context_set_text_color")

    def graphics_context_set_compositing_mode(self, ctx, mode):
        raise NotImplementedError("graphics_context_set_compositing_mode")

    def graphics_text_draw(self, ctx, text, font, box, overflow_mode, alignment, layout):
        raise NotImplementedError("graphics_text_draw")

    def light_enable(self, enable):
        raise NotImplementedError("light_enable")

    def light_enable_interaction(self):
        raise NotImplementedError("light_enable_interaction")

    def window_set_click_config_provider(self, window, click_config_provider):
        raise NotImplementedError("window_set_click_config_provider")

    def vibes_double_pulse(self):
        raise NotImplementedError("vibes_double_pulse")

    def vibes_enqueue_custom_pattern(self, pattern):
        raise NotImplementedError("vibes_enqueue_custom_pattern")

    def vibes_long_pulse(self):
        raise NotImplementedError("vibes_long_pulse")

    def vibes_short_pulse(self):
        raise NotImplementedError("vibes_short_pulse")

    def layer_mark_dirty(self, layer):
        raise NotImplementedError("layer_mark_dirty")

    def layer_remove_from_parent(self, child):
        raise NotImplementedError("layer_remove_from_parent")

    def layer_add_child(self, parent, child):
        raise NotImplementedError("layer_add_child")

    def layer_get_frame(self, layer):
        raise NotImplementedError("layer_get_frame")

    def layer_set_frame(self, layer, frame):
        raise NotImplementedError("layer_set_frame")

    def layer_set_hidden(self, layer, hidden):
        raise NotImplementedError("layer_set_hidden")

    def layer_init(self, layer, frame):
        raise NotImplementedError("layer_init")

    def cos_lookup(self, angle):
        raise NotImplementedError("cos_lookup")

    def sin_lookup(self, angle):
        raise NotImplementedError("sin_lookup")

    def grect_center_point(self, rect):
        raise NotImplementedError("grect_center_point")

    def resource_init_current_app(self, version):
        raise NotImplementedError("resource_init_current_app")

    def resource_get_handle(self, file_id):
        raise NotImplementedError("resource_get_handle")

    def resource_load(self, h, buffer, max_length):
        raise NotImplementedError("resource_load")

    def resource_load_byte_range(self, h, start_bytes, data, num_bytes):
        raise NotImplementedError("resource_load_byte_range")

    def resource_size(self, h):
        raise NotImplementedError("resource_size")

    def fonts_get_system_font(self, font_key):
        raise NotImplementedError("fonts_get_system_font")

    def fonts_load_custom_font(self, resource):
        raise NotImplementedError("fonts_load_custom_font")

    def fonts_unload_custom_font(self, font):
        raise NotImplementedError("fonts_unload_custom_font")

    def text_layer_init(self, text_layer, frame):
        raise NotImplementedError("text_layer_init")

    def text_layer_get_text(self, text_layer):
        raise NotImplementedError("text_layer_get_text")

    def text_layer_set_text(self, text_layer, text):
        raise NotImplementedError("text_layer_set_text")

    def text_layer_set_background_color(self, text_layer, color):
        raise NotImplementedError("text_layer_set_background_color")

    def text_layer_set_font(self, text_layer, font):
        raise NotImplementedError("text_layer_set_font")

    def text_layer_set_text_alignment(self, text_layer, text_alignment):
        raise NotImplementedError("text_layer_set_text_alignment")

    def text_layer_set_text_color(self, text_layer, color):
        raise NotImplementedError("text_layer_set_text_color")

    def clock_is_24h_style(self):
        raise NotImplementedError("clock_is_24h_style")

    def get_time(self, time):
        raise NotImplementedError("get_time")

    def string_format_time(self, ptr, maxsize, format, timeptr):
        raise NotImplementedError("string_format_time")

    def psleep(self, millis):
        raise NotImplementedError("psleep")

    def app_timer_send_event(self, app_ctx, timeout_ms, cookie):
        raise NotImplementedError("app_timer_send_event")

    def app_timer_cancel_event(self, app_ctx_ref, handle):
        raise NotImplementedError("app_timer_cancel_event")

    def window_init(self, window, debug_name):
        raise NotImplementedError("window_init")

    def window_stack_push(self, window, animated):
        raise NotImplementedError("window_stack_push")

    def window_set_background_color(self, window, background_color):
        raise NotImplementedError("window_set_background_color")

    def window_render(self, window, ctx):
        raise NotImplementedError("window_render")

    def window_set_fullscreen(self, window, enabled):
        raise NotImplementedError("window_set_fullscreen")
