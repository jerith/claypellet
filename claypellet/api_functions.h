/***************************************************************
 * This is a list of all documented API functions.
 * It gets included in a call to `FFI.cdef()', so it needs to be
 * parseable by that.
 ***************************************************************/

void animation_init(Animation *animation);
void animation_set_delay(Animation *animation, uint32_t delay_ms);
void animation_set_duration(Animation *animation, uint32_t duration_ms);
void animation_set_curve(Animation *animation, AnimationCurve curve);
void animation_set_handlers(Animation *animation, AnimationHandlers callbacks, void *context);
void animation_set_implementation(Animation *animation, const AnimationImplementation *implementation);
void *animation_get_context(Animation *animation);
void animation_schedule(Animation *animation);
void animation_unschedule(Animation *animation);
void animation_unschedule_all(void);
bool animation_is_scheduled(Animation *animation);
void property_animation_init_layer_frame(PropertyAnimation *property_animation, struct Layer *layer, GRect *from_frame, GRect *to_frame);
void app_event_loop(AppTaskContextRef app_task_ctx, PebbleAppHandlers *handlers);
bool bmp_init_container(int resource_id, BmpContainer *c);
void bmp_deinit_container(BmpContainer *c);
void graphics_draw_bitmap_in_rect(GContext *ctx, const GBitmap *bitmap, GRect rect);
void rotbmp_deinit_container(RotBmpContainer *c);
bool rotbmp_init_container(int resource_id, RotBmpContainer *c);
void rotbmp_pair_deinit_container(RotBmpPairContainer *c);
bool rotbmp_pair_init_container(int white_resource_id, int black_resource_id, RotBmpPairContainer *c);
void rotbmp_pair_layer_set_src_ic(RotBmpPairLayer *pair, GPoint ic);
void rotbmp_pair_layer_set_angle(RotBmpPairLayer *pair, int32_t angle);
GContext *app_get_current_graphics_context(void);
void graphics_draw_pixel(GContext *ctx, GPoint point);
void graphics_draw_line(GContext *ctx, GPoint p0, GPoint p1);
void graphics_fill_rect(GContext *ctx, GRect rect, uint8_t corner_radius, GCornerMask corner_mask);
void graphics_draw_circle(GContext *ctx, GPoint p, int radius);
void graphics_fill_circle(GContext *ctx, GPoint p, int radius);
void graphics_draw_round_rect(GContext *ctx, GRect rect, int radius);
void gpath_init(GPath *path, const GPathInfo *init);
void gpath_move_to(GPath *path, GPoint point);
void gpath_rotate_to(GPath *path, int32_t angle);
void gpath_draw_outline(GContext *ctx, GPath *path);
void gpath_draw_filled(GContext *ctx, GPath *path);
void graphics_context_set_stroke_color(GContext *ctx, GColor color);
void graphics_context_set_fill_color(GContext *ctx, GColor color);
void graphics_context_set_text_color(GContext *ctx, GColor color);
void graphics_context_set_compositing_mode(GContext *ctx, GCompOp mode);
void graphics_text_draw(GContext *ctx, const char *text, const GFont font, const GRect box, const GTextOverflowMode overflow_mode, const GTextAlignment alignment, const GTextLayoutCacheRef layout);
void light_enable(bool enable);
void light_enable_interaction(void);
void window_set_click_config_provider(Window *window, ClickConfigProvider click_config_provider);
void vibes_double_pulse(void);
void vibes_enqueue_custom_pattern(VibePattern pattern);
void vibes_long_pulse(void);
void vibes_short_pulse(void);
void layer_mark_dirty(Layer *layer);
void layer_remove_from_parent(Layer *child);
void layer_add_child(Layer *parent, Layer *child);
GRect layer_get_frame(Layer *layer);
void layer_set_frame(Layer *layer, GRect frame);
GRect layer_get_bounds(Layer *layer);
void layer_set_bounds(Layer *layer, GRect frame);
void layer_set_hidden(Layer *layer, bool hidden);
void layer_init(Layer *layer, GRect frame);
int32_t cos_lookup(int32_t angle);
int32_t sin_lookup(int32_t angle);
GPoint grect_center_point(GRect *rect);
void resource_init_current_app(ResVersionHandle version);
ResHandle resource_get_handle(uint32_t file_id);
size_t resource_load(ResHandle h, uint8_t *buffer, size_t max_length);
size_t resource_load_byte_range(ResHandle h, uint32_t start_bytes, uint8_t *data, size_t num_bytes);
size_t resource_size(ResHandle h);
GFont fonts_get_system_font(const char *font_key);
GFont fonts_load_custom_font(ResHandle resource);
void fonts_unload_custom_font(GFont font);
void text_layer_init(TextLayer *text_layer, GRect frame);
const char *text_layer_get_text(TextLayer *text_layer);
void text_layer_set_text(TextLayer *text_layer, const char *text);
void text_layer_set_background_color(TextLayer *text_layer, GColor color);
void text_layer_set_font(TextLayer *text_layer, GFont font);
void text_layer_set_text_alignment(TextLayer *text_layer, GTextAlignment text_alignment);
void text_layer_set_text_color(TextLayer *text_layer, GColor color);
bool clock_is_24h_style(void);
void get_time(PblTm *time);
void string_format_time(char *ptr, size_t maxsize, const char *format, const PblTm *timeptr);
void psleep(int millis);
AppTimerHandle app_timer_send_event(AppContextRef app_ctx, uint32_t timeout_ms, uint32_t cookie);
bool app_timer_cancel_event(AppContextRef app_ctx_ref, AppTimerHandle handle);
void window_init(Window *window, const char *debug_name);
void window_stack_push(Window *window, bool animated);
void window_set_background_color(Window *window, GColor background_color);
void window_render(Window *window, GContext *ctx);
void window_set_fullscreen(Window *window, bool enabled);
