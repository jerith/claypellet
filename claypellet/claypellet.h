/***************************************************************
 * This file is automatically generated.
 * It gets included in a call to `FFI.cdef()', so it needs to be
 * parseable by that.
 ***************************************************************/


typedef void (*t_animation_init_cb)(Animation *animation);
typedef void (*t_animation_set_delay_cb)(Animation *animation, uint32_t delay_ms);
typedef void (*t_animation_set_duration_cb)(Animation *animation, uint32_t duration_ms);
typedef void (*t_animation_set_curve_cb)(Animation *animation, AnimationCurve curve);
typedef void (*t_animation_set_handlers_cb)(Animation *animation, AnimationHandlers callbacks, void *context);
typedef void (*t_animation_set_implementation_cb)(Animation *animation, const AnimationImplementation *implementation);
typedef void *(*t_animation_get_context_cb)(Animation *animation);
typedef void (*t_animation_schedule_cb)(Animation *animation);
typedef void (*t_animation_unschedule_cb)(Animation *animation);
typedef void (*t_animation_unschedule_all_cb)(void);
typedef bool (*t_animation_is_scheduled_cb)(Animation *animation);
typedef void (*t_property_animation_init_layer_frame_cb)(PropertyAnimation *property_animation, struct Layer *layer, GRect *from_frame, GRect *to_frame);
typedef void (*t_app_event_loop_cb)(AppTaskContextRef app_task_ctx, PebbleAppHandlers *handlers);
typedef bool (*t_bmp_init_container_cb)(int resource_id, BmpContainer *c);
typedef void (*t_bmp_deinit_container_cb)(BmpContainer *c);
typedef void (*t_graphics_draw_bitmap_in_rect_cb)(GContext *ctx, const GBitmap *bitmap, GRect rect);
typedef void (*t_rotbmp_deinit_container_cb)(RotBmpContainer *c);
typedef bool (*t_rotbmp_init_container_cb)(int resource_id, RotBmpContainer *c);
typedef void (*t_rotbmp_pair_deinit_container_cb)(RotBmpPairContainer *c);
typedef bool (*t_rotbmp_pair_init_container_cb)(int white_resource_id, int black_resource_id, RotBmpPairContainer *c);
typedef void (*t_rotbmp_pair_layer_set_src_ic_cb)(RotBmpPairLayer *pair, GPoint ic);
typedef void (*t_rotbmp_pair_layer_set_angle_cb)(RotBmpPairLayer *pair, int32_t angle);
typedef GContext *(*t_app_get_current_graphics_context_cb)(void);
typedef void (*t_graphics_draw_pixel_cb)(GContext *ctx, GPoint point);
typedef void (*t_graphics_draw_line_cb)(GContext *ctx, GPoint p0, GPoint p1);
typedef void (*t_graphics_fill_rect_cb)(GContext *ctx, GRect rect, uint8_t corner_radius, GCornerMask corner_mask);
typedef void (*t_graphics_draw_circle_cb)(GContext *ctx, GPoint p, int radius);
typedef void (*t_graphics_fill_circle_cb)(GContext *ctx, GPoint p, int radius);
typedef void (*t_graphics_draw_round_rect_cb)(GContext *ctx, GRect rect, int radius);
typedef void (*t_gpath_init_cb)(GPath *path, const GPathInfo *init);
typedef void (*t_gpath_move_to_cb)(GPath *path, GPoint point);
typedef void (*t_gpath_rotate_to_cb)(GPath *path, int32_t angle);
typedef void (*t_gpath_draw_outline_cb)(GContext *ctx, GPath *path);
typedef void (*t_gpath_draw_filled_cb)(GContext *ctx, GPath *path);
typedef void (*t_graphics_context_set_stroke_color_cb)(GContext *ctx, GColor color);
typedef void (*t_graphics_context_set_fill_color_cb)(GContext *ctx, GColor color);
typedef void (*t_graphics_context_set_text_color_cb)(GContext *ctx, GColor color);
typedef void (*t_graphics_context_set_compositing_mode_cb)(GContext *ctx, GCompOp mode);
typedef void (*t_graphics_text_draw_cb)(GContext *ctx, const char *text, const GFont font, const GRect box, const GTextOverflowMode overflow_mode, const GTextAlignment alignment, const GTextLayoutCacheRef layout);
typedef void (*t_light_enable_cb)(bool enable);
typedef void (*t_light_enable_interaction_cb)(void);
typedef void (*t_window_set_click_config_provider_cb)(Window *window, ClickConfigProvider click_config_provider);
typedef void (*t_vibes_double_pulse_cb)(void);
typedef void (*t_vibes_enqueue_custom_pattern_cb)(VibePattern pattern);
typedef void (*t_vibes_long_pulse_cb)(void);
typedef void (*t_vibes_short_pulse_cb)(void);
typedef void (*t_layer_mark_dirty_cb)(Layer *layer);
typedef void (*t_layer_remove_from_parent_cb)(Layer *child);
typedef void (*t_layer_add_child_cb)(Layer *parent, Layer *child);
typedef GRect (*t_layer_get_frame_cb)(Layer *layer);
typedef void (*t_layer_set_frame_cb)(Layer *layer, GRect frame);
typedef GRect (*t_layer_get_bounds_cb)(Layer *layer);
typedef void (*t_layer_set_bounds_cb)(Layer *layer, GRect frame);
typedef void (*t_layer_set_hidden_cb)(Layer *layer, bool hidden);
typedef void (*t_layer_init_cb)(Layer *layer, GRect frame);
typedef int32_t (*t_cos_lookup_cb)(int32_t angle);
typedef int32_t (*t_sin_lookup_cb)(int32_t angle);
typedef GPoint (*t_grect_center_point_cb)(GRect *rect);
typedef void (*t_resource_init_current_app_cb)(ResVersionHandle version);
typedef ResHandle (*t_resource_get_handle_cb)(uint32_t file_id);
typedef size_t (*t_resource_load_cb)(ResHandle h, uint8_t *buffer, size_t max_length);
typedef size_t (*t_resource_load_byte_range_cb)(ResHandle h, uint32_t start_bytes, uint8_t *data, size_t num_bytes);
typedef size_t (*t_resource_size_cb)(ResHandle h);
typedef GFont (*t_fonts_get_system_font_cb)(const char *font_key);
typedef GFont (*t_fonts_load_custom_font_cb)(ResHandle resource);
typedef void (*t_fonts_unload_custom_font_cb)(GFont font);
typedef void (*t_text_layer_init_cb)(TextLayer *text_layer, GRect frame);
typedef const char *(*t_text_layer_get_text_cb)(TextLayer *text_layer);
typedef void (*t_text_layer_set_text_cb)(TextLayer *text_layer, const char *text);
typedef void (*t_text_layer_set_background_color_cb)(TextLayer *text_layer, GColor color);
typedef void (*t_text_layer_set_font_cb)(TextLayer *text_layer, GFont font);
typedef void (*t_text_layer_set_text_alignment_cb)(TextLayer *text_layer, GTextAlignment text_alignment);
typedef void (*t_text_layer_set_text_color_cb)(TextLayer *text_layer, GColor color);
typedef bool (*t_clock_is_24h_style_cb)(void);
typedef void (*t_get_time_cb)(PblTm *time);
typedef void (*t_string_format_time_cb)(char *ptr, size_t maxsize, const char *format, const PblTm *timeptr);
typedef void (*t_psleep_cb)(int millis);
typedef AppTimerHandle (*t_app_timer_send_event_cb)(AppContextRef app_ctx, uint32_t timeout_ms, uint32_t cookie);
typedef bool (*t_app_timer_cancel_event_cb)(AppContextRef app_ctx_ref, AppTimerHandle handle);
typedef void (*t_window_init_cb)(Window *window, const char *debug_name);
typedef void (*t_window_stack_push_cb)(Window *window, bool animated);
typedef void (*t_window_set_background_color_cb)(Window *window, GColor background_color);
typedef void (*t_window_render_cb)(Window *window, GContext *ctx);
typedef void (*t_window_set_fullscreen_cb)(Window *window, bool enabled);

void setup_callbacks(t_animation_init_cb animation_init,
                     t_animation_set_delay_cb animation_set_delay,
                     t_animation_set_duration_cb animation_set_duration,
                     t_animation_set_curve_cb animation_set_curve,
                     t_animation_set_handlers_cb animation_set_handlers,
                     t_animation_set_implementation_cb animation_set_implementation,
                     t_animation_get_context_cb animation_get_context,
                     t_animation_schedule_cb animation_schedule,
                     t_animation_unschedule_cb animation_unschedule,
                     t_animation_unschedule_all_cb animation_unschedule_all,
                     t_animation_is_scheduled_cb animation_is_scheduled,
                     t_property_animation_init_layer_frame_cb property_animation_init_layer_frame,
                     t_app_event_loop_cb app_event_loop,
                     t_bmp_init_container_cb bmp_init_container,
                     t_bmp_deinit_container_cb bmp_deinit_container,
                     t_graphics_draw_bitmap_in_rect_cb graphics_draw_bitmap_in_rect,
                     t_rotbmp_deinit_container_cb rotbmp_deinit_container,
                     t_rotbmp_init_container_cb rotbmp_init_container,
                     t_rotbmp_pair_deinit_container_cb rotbmp_pair_deinit_container,
                     t_rotbmp_pair_init_container_cb rotbmp_pair_init_container,
                     t_rotbmp_pair_layer_set_src_ic_cb rotbmp_pair_layer_set_src_ic,
                     t_rotbmp_pair_layer_set_angle_cb rotbmp_pair_layer_set_angle,
                     t_app_get_current_graphics_context_cb app_get_current_graphics_context,
                     t_graphics_draw_pixel_cb graphics_draw_pixel,
                     t_graphics_draw_line_cb graphics_draw_line,
                     t_graphics_fill_rect_cb graphics_fill_rect,
                     t_graphics_draw_circle_cb graphics_draw_circle,
                     t_graphics_fill_circle_cb graphics_fill_circle,
                     t_graphics_draw_round_rect_cb graphics_draw_round_rect,
                     t_gpath_init_cb gpath_init,
                     t_gpath_move_to_cb gpath_move_to,
                     t_gpath_rotate_to_cb gpath_rotate_to,
                     t_gpath_draw_outline_cb gpath_draw_outline,
                     t_gpath_draw_filled_cb gpath_draw_filled,
                     t_graphics_context_set_stroke_color_cb graphics_context_set_stroke_color,
                     t_graphics_context_set_fill_color_cb graphics_context_set_fill_color,
                     t_graphics_context_set_text_color_cb graphics_context_set_text_color,
                     t_graphics_context_set_compositing_mode_cb graphics_context_set_compositing_mode,
                     t_graphics_text_draw_cb graphics_text_draw,
                     t_light_enable_cb light_enable,
                     t_light_enable_interaction_cb light_enable_interaction,
                     t_window_set_click_config_provider_cb window_set_click_config_provider,
                     t_vibes_double_pulse_cb vibes_double_pulse,
                     t_vibes_enqueue_custom_pattern_cb vibes_enqueue_custom_pattern,
                     t_vibes_long_pulse_cb vibes_long_pulse,
                     t_vibes_short_pulse_cb vibes_short_pulse,
                     t_layer_mark_dirty_cb layer_mark_dirty,
                     t_layer_remove_from_parent_cb layer_remove_from_parent,
                     t_layer_add_child_cb layer_add_child,
                     t_layer_get_frame_cb layer_get_frame,
                     t_layer_set_frame_cb layer_set_frame,
                     t_layer_get_bounds_cb layer_get_bounds,
                     t_layer_set_bounds_cb layer_set_bounds,
                     t_layer_set_hidden_cb layer_set_hidden,
                     t_layer_init_cb layer_init,
                     t_cos_lookup_cb cos_lookup,
                     t_sin_lookup_cb sin_lookup,
                     t_grect_center_point_cb grect_center_point,
                     t_resource_init_current_app_cb resource_init_current_app,
                     t_resource_get_handle_cb resource_get_handle,
                     t_resource_load_cb resource_load,
                     t_resource_load_byte_range_cb resource_load_byte_range,
                     t_resource_size_cb resource_size,
                     t_fonts_get_system_font_cb fonts_get_system_font,
                     t_fonts_load_custom_font_cb fonts_load_custom_font,
                     t_fonts_unload_custom_font_cb fonts_unload_custom_font,
                     t_text_layer_init_cb text_layer_init,
                     t_text_layer_get_text_cb text_layer_get_text,
                     t_text_layer_set_text_cb text_layer_set_text,
                     t_text_layer_set_background_color_cb text_layer_set_background_color,
                     t_text_layer_set_font_cb text_layer_set_font,
                     t_text_layer_set_text_alignment_cb text_layer_set_text_alignment,
                     t_text_layer_set_text_color_cb text_layer_set_text_color,
                     t_clock_is_24h_style_cb clock_is_24h_style,
                     t_get_time_cb get_time,
                     t_string_format_time_cb string_format_time,
                     t_psleep_cb psleep,
                     t_app_timer_send_event_cb app_timer_send_event,
                     t_app_timer_cancel_event_cb app_timer_cancel_event,
                     t_window_init_cb window_init,
                     t_window_stack_push_cb window_stack_push,
                     t_window_set_background_color_cb window_set_background_color,
                     t_window_render_cb window_render,
                     t_window_set_fullscreen_cb window_set_fullscreen);

/***************************************************************************
 * This file (claypellet_extra.h) is included as-is in claypellet.h when it
 * gets generated.
 ***************************************************************************/

void pbl_main(void *params);


struct ClayResourceHandle {
    uint32_t file_id;
};

struct ClayGraphicsContext {
    uint32_t gctx_id;
};
