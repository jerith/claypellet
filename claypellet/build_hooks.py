import re


FUNC_RE = re.compile(r'^(?P<rtype>[^(]+ \**)(?P<name>[^(]+)\((?P<args>.*)\);$')
ARG_RE = re.compile(r'^(?P<type>.* \**)(?P<name>[^ *]+)$')


def splitfunc(func):
    return FUNC_RE.match(func).groupdict()


def mktypedef(funcparts):
    return 'typedef %(rtype)s(*t_%(name)s_cb)(%(args)s);' % funcparts


def mkcargs(args):
    if args == 'void':
        return ''
    return ', '.join(ARG_RE.match(arg.strip()).groupdict()['name']
                     for arg in args.split(','))


def mkhookfunc(funcparts):
    parts = funcparts.copy()
    parts['ret'] = 'return ' if parts['rtype'] != 'void ' else ''
    parts['cargs'] = mkcargs(parts['args'])
    return ('%(rtype)s%(name)s(%(args)s) '
            '{ %(ret)s%(name)s_cb(%(cargs)s); }') % parts


def mkpyfunc(funcparts):
    parts = funcparts.copy()
    parts['cargs'] = mkcargs(parts['args'])
    if parts['cargs']:
        parts['cargs'] = ', ' + parts['cargs']
    return ('    def %(name)s(self%(cargs)s):\n'
            '        raise NotImplementedError("%(name)s")\n') % parts


def mkcbvar(funcparts):
    return 't_%(name)s_cb %(name)s_cb;' % funcparts


def mksetup(splitfuncs, with_body=True):
    front = 'void setup_callbacks('
    argsep = ',\n' + (' ' * len(front))
    args = argsep.join('t_%(name)s_cb %(name)s' % sf for sf in splitfuncs)

    if with_body:
        body = '\n    '.join('%(name)s_cb = %(name)s;' % sf
                             for sf in splitfuncs)
        return '%s%s) {\n    %s\n}' % (front, args, body)
    else:
        return '%s%s);' % (front, args)


def mkpysetup(splitfuncs):
    front = ('    def setup_callbacks(self):\n'
             '        self._callbacks = [\n            ')
    back = ('\n        ]\n'
            '        self.lib.setup_callbacks(*self._callbacks)\n')
    argsep = '\n            '
    body = argsep.join("self._mkcallback('%(name)s')," % sf
                       for sf in splitfuncs)

    return "%s%s%s" % (front, body, back)


funcs = [line.strip() for line in open('api_functions.h').readlines()
         if line.strip().endswith(';')]
splitfuncs = [splitfunc(func) for func in funcs]


typedefs = '\n'.join(mktypedef(sf) for sf in splitfuncs)
cbvars = '\n'.join(mkcbvar(sf) for sf in splitfuncs)
hookfuncs = '\n'.join(mkhookfunc(sf) for sf in splitfuncs)
setupdecl = mksetup(splitfuncs, with_body=False)
setupfunc = mksetup(splitfuncs, with_body=True)
pyfuncs = '\n'.join(mkpyfunc(sf) for sf in splitfuncs)
pysetupfunc = mkpysetup(splitfuncs)


with open('claypellet.h', 'w') as hfile:
    hfile.write(
        "/***************************************************************\n"
        " * This file is automatically generated.\n"
        " * It gets included in a call to `FFI.cdef()', so it needs to be\n"
        " * parseable by that.\n"
        " ***************************************************************/\n")
    hfile.write('\n\n')
    hfile.write(typedefs)
    hfile.write('\n\n')
    hfile.write(setupdecl)
    hfile.write('\n\n')
    hfile.write(open('claypellet_extra.h').read())

with open('claypellet.c', 'w') as cfile:
    cfile.write(
        "/***************************************************************\n"
        " * This file is automatically generated.\n"
        " ***************************************************************/\n"
        "\n"
        '#include "pebble_os.h"\n'
        '#include "pebble_app.h"\n'
        '#include "pebble_fonts.h"\n'
        "\n"
        "// Undefine some macros so our typedefs don't get confused.\n"
        "#undef GPoint(x, y)\n"
        "#undef GSize(w, h)\n"
        "#undef GRect(x, y, w, h)\n"
        "\n"
        '#include "claypellet.h"\n'
        "\n")
    cfile.write('\n\n')
    cfile.write(cbvars)
    cfile.write('\n\n')
    cfile.write(setupfunc)
    cfile.write('\n\n')
    cfile.write(hookfuncs)
    cfile.write('\n\n')

with open('harness_hooks.py', 'w') as pyfile:
    pyfile.write(
        "#################################################################\n"
        "# This file is automatically generated.\n"
        "#################################################################\n"
        "\n\n"
        "class PebbleHarnessBase(object):\n")
    pyfile.write(pysetupfunc)
    pyfile.write('\n')
    pyfile.write(pyfuncs)

print "done"
